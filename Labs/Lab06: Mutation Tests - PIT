Task 01:
There is a pom.xml file under kubernetes-devops-security repository. Update this file as per details mentioned below:
Add PITest Mutation Plugin in this file, below you can find the sample code snippet for the same:
<plugin>
   <groupId>org.pitest</groupId>
   <artifactId>pitest-maven</artifactId>
   <version>1.5.0</version>
   <dependencies>
      <dependency>
         <groupId>org.pitest</groupId>
         <artifactId>pitest-junit5-plugin</artifactId>
         <version>0.12</version>
      </dependency>
   </dependencies>
</plugin>

Remember to update the given code snippet so that the build fails if the output (Mutation Threshold) is less than 75%
Update the given code snippet to make sure plugin generates the output in HTML and XML format.

Solution
Open pom.xml file in VS Code editor and paste the given code snippet:
<plugin>
   <groupId>org.pitest</groupId>
   <artifactId>pitest-maven</artifactId>
   <version>1.5.0</version>
   <dependencies>
      <dependency>
         <groupId>org.pitest</groupId>
         <artifactId>pitest-junit5-plugin</artifactId>
         <version>0.12</version>
      </dependency>
   </dependencies>
   <configuration>
      <mutationThreshold>75</mutationThreshold>
      <outputFormats>
         <outputFormat>XML</outputFormat>
         <outputFormat>HTML</outputFormat>
      </outputFormats>
   </configuration>
</plugin>


Task 02:
Modify the existing pipeline and add another stage (preferably under Unit Tests - JUnit and Jacoco stage) to run the Mutation Tests and name it as per your choice. The command to run these tests is: mvn org.pitest:pitest-maven:mutationCoverage.

In this same stage, add a post field that uses the pitmutation plugin to generate the tests report.
Refer the plugin documentation by clicking on the PIT Mutation button on the top bar.

Solution
Login into the Jenkins UI and install PIT Mutation plugin.
Now add a new stage in Jenkinsfile:

stage('Mutation Tests - PIT') {
      steps {
        sh "mvn org.pitest:pitest-maven:mutationCoverage"
      }
      post {
        always {
          pitmutation mutationStatsFile: '**/target/pit-reports/**/mutations.xml'
        }
      }
    }


Task 03:
Look into the recent Jenkins build and check the PIT Mutation Report. Identify the survived mutation tests and improve those tests so that these mutation tests are killed and the build passes.

Solution
Open src/test/java/com/devsecops/NumericApplicationTests.java file in VS Code editor and make some changes in the tests, the tests must look like as below:

    @Test
    public void smallerThanOrEqualToFiftyMessage() throws Exception {
        this.mockMvc.perform(get("/compare/50")).andDo(print()).andExpect(status().isOk())
          .andExpect(content().string("Smaller than or equal to 50"));
    }

    @Test
    public void greaterThanFiftyMessage() throws Exception {
        this.mockMvc.perform(get("/compare/51")).andDo(print()).andExpect(status().isOk())
                .andExpect(content().string("Greater than 50"));
    }

    @Test
    public void welcomeMessage() throws Exception {
         this.mockMvc.perform(get("/")).andDo(print()).andExpect(status().isOk())
           .andExpect(content().string("Kubernetes DevSecOps"));
    }


Task 04:
For the latest Jenkins build you might have noticed in PIT Mutation Report that there is one code functionality (/increment) which has no coverage so far as we don't have any test for it.
Add a test for /increment functionality and make sure the you don't see NO_COVERAGE for any functionality.

Solution
Open src/test/java/com/devsecops/NumericApplicationTests.java file in Vscode editor and add a new test as below (instead of number 50 you can use any number):

    @Test
    public void incrementByOneMessage() throws Exception {
         this.mockMvc.perform(get("/increment/50")).andDo(print()).andExpect(status().isOk())
           .andExpect(content().string("51"));
    }